name: PR 检查

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: PR 验证
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        # 获取完整历史以便进行差异分析
        fetch-depth: 0

    - name: 设置 Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 缓存 Gradle 依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 授予 gradlew 执行权限
      run: chmod +x gradlew

    - name: 检查 PR 标题格式
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          chore
          ci
          build
        requireScope: false
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          主题必须以小写字母开头，不能以大写字母开头。
          例如: "feat: 添加用户认证功能" 而不是 "feat: 添加用户认证功能"

    - name: 运行完整代码检查
      run: ./gradlew clean codeQuality

    - name: 检查代码覆盖率
      run: ./gradlew jacocoTestCoverageVerification

    - name: 生成覆盖率报告
      id: jacoco
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: |
          ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80
        title: 代码覆盖率报告
        update-comment: true

    - name: 检查 TODO/FIXME 注释
      run: |
        if grep -r "TODO\|FIXME" src/main/java/ --exclude-dir=target; then
          echo "⚠️ 发现 TODO 或 FIXME 注释，请在提交前处理："
          grep -rn "TODO\|FIXME" src/main/java/ --exclude-dir=target || true
          echo "如果这些注释是有意保留的，请在PR描述中说明原因。"
        else
          echo "✅ 未发现待处理的 TODO 或 FIXME 注释"
        fi

    - name: 检查敏感信息
      run: |
        echo "🔍 检查敏感信息..."
        SENSITIVE_PATTERNS="password|secret|token|key|credential|api_key"
        if grep -ri "$SENSITIVE_PATTERNS" src/ --exclude-dir=target --exclude="*.class" | grep -v "// 这是示例" | grep -v "# 配置示例"; then
          echo "⚠️ 可能包含敏感信息，请检查："
          grep -rin "$SENSITIVE_PATTERNS" src/ --exclude-dir=target --exclude="*.class" | grep -v "// 这是示例" | grep -v "# 配置示例" || true
          echo "请确保没有硬编码的密码、密钥或其他敏感信息。"
          exit 1
        else
          echo "✅ 未发现明显的敏感信息"
        fi

  architecture-tests:
    name: 架构测试
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: 缓存 Gradle 依赖
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 授予 gradlew 执行权限
      run: chmod +x gradlew

    - name: 运行架构测试
      run: ./gradlew test --tests="*ArchitectureTest"
